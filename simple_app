import os
import re
import json
import formulas
import openpyxl
import hashlib
from openpyxl.worksheet.formula import ArrayFormula
import tkinter as tk
from tkinter import scrolledtext
import pythoncom
import win32com.client

display_mode = 'simple'
working_path = r"C:\Users\user\Desktop\pytest\Formula Difference Analyzer"

def process_task_recursively(
    task,
    prefix="",
    current_path=None,
    parent_context=None,
    unique_nodes_for_report=None,
    final_dependency_map=None,
    trace_dependency_vine=None,
    working_path=None,
    display_mode="simple"
):
    if current_path is None:
        current_path = set()

    task_identifier = (task["file"], task["sheet"], task["cell"])
    
    if task_identifier in current_path:
        print(f"{prefix}📍 Circular reference to [{os.path.basename(task['file'])}]{task['sheet']}!{task['cell']} detected, stopping expansion.")
        return

    current_path.add(task_identifier)
    
    if unique_nodes_for_report is not None and task_identifier not in unique_nodes_for_report:
        unique_nodes_for_report.add(task_identifier)
        if final_dependency_map is not None:
            final_dependency_map.append(task)
    
    dependencies, is_formula, content = trace_dependency_vine(task, working_path)

    is_internal_dependency = (
        display_mode == 'simple' and
        parent_context and
        task['file'] == parent_context['file']
    )

    if is_internal_dependency:
        if task['sheet'].lower() == parent_context['sheet'].lower():
            header = task['cell']
        else:
            header = f"{task['sheet']}!{task['cell']}"
    else:
        header = f"[{os.path.basename(task['file'])}]{task['sheet']}!{task['cell']}"

    if not is_formula and content.startswith('['):
        print(f"{prefix}📍 {header}")
        print(f"{prefix.replace('📍', ' ' * len('📍'))}🔷 Characteristic: {content}")
    elif not is_formula:
        if is_internal_dependency:
            print(f"{prefix}📍 {header}: {content}")
        else:
            print(f"{prefix}📍 {header}: {content}")
    else:
        print(f"{prefix}📍 {header}")
        symbol = "⚙️ Formula:"
        print(f"{prefix}{symbol} {content}")

    def sort_dependencies_by_formula_order(dependencies, formula):
        if not formula or not isinstance(formula, str) or not dependencies:
            return dependencies
        formula_upper = formula.upper()
        dep_positions = []
        for dep in dependencies:
            dep_cell = dep.get("cell", "")
            dep_sheet = dep.get("sheet", "")
            patterns = [
                re.escape(dep_cell),
                re.escape(f"{dep_sheet}!{dep_cell}"),
                re.escape(f"'{dep_sheet}'!{dep_cell}")
            ]
            min_pos = len(formula_upper)+1
            for pat in patterns:
                m = re.search(pat, formula_upper)
                if m:
                    min_pos = min(min_pos, m.start())
            dep_positions.append((min_pos, dep))
        dep_positions.sort(key=lambda x: x[0])
        return [d for pos, d in dep_positions]

    formula_for_order = None
    if is_formula and isinstance(content, str) and content.startswith("="):
        formula_for_order = content
    elif is_formula and isinstance(content, str):
        formula_for_order = content

    ordered_dependencies = sort_dependencies_by_formula_order(dependencies, formula_for_order)

    for i, dep_task in enumerate(ordered_dependencies):
        is_last = i == len(ordered_dependencies) - 1
        child_prefix = (prefix.replace("├─", "│    ").replace("└─", "     ")) + ("└─ " if is_last else "├─ ")
        process_task_recursively(
            dep_task,
            prefix=child_prefix,
            current_path=current_path.copy(),
            parent_context=task,
            unique_nodes_for_report=unique_nodes_for_report,
            final_dependency_map=final_dependency_map,
            trace_dependency_vine=trace_dependency_vine,
            working_path=working_path,
            display_mode=display_mode
        )

def trace_dependency_vine(task, working_path):
    target_file_path, target_sheet_name, target_cell_address = task["file"], task["sheet"], task["cell"]
    wb_openpyxl = None
    try:
        wb_openpyxl = openpyxl.load_workbook(filename=target_file_path, data_only=False)
        excel_model = formulas.ExcelModel().load(target_file_path)

        actual_sheet_name = next((s for s in wb_openpyxl.sheetnames if s.lower() == target_sheet_name.lower()), None)
        if not actual_sheet_name:
            raise ValueError(f"Worksheet '{target_sheet_name}' does not exist.")

        ws_openpyxl = wb_openpyxl[actual_sheet_name]
        cell_obj = ws_openpyxl[target_cell_address]

        if isinstance(cell_obj, tuple):
            rows = len(cell_obj)
            cols = len(cell_obj[0]) if rows > 0 else 0
            
            dimension_str = f"[{rows}R x {cols}C]"
            summary_str = ""

            total_sum = 0
            numeric_cells_count = 0
            error_cells_count = 0
            text_cells_count = 0
            hash_content_string = ""
            
            for row_of_cells in cell_obj:
                for cell in row_of_cells:
                    value = cell.value
                    hash_content_string += str(value) + "||"
                    
                    if isinstance(value, (int, float)):
                        total_sum += value
                        numeric_cells_count += 1
                    elif isinstance(value, str):
                        if value.startswith('#'):
                            error_cells_count += 1
                        else:
                            text_cells_count += 1
            
            sha256_hash = hashlib.sha256(hash_content_string.encode('utf-8')).hexdigest()
            hash_str = f" [Hash: {sha256_hash[:8]}...]"

            if numeric_cells_count > 0:
                summary_str = f" [Sum: {total_sum:,.2f}]".replace('.00', '')
            elif error_cells_count > 0:
                summary_str = f" [Errors: {error_cells_count}]"
            elif text_cells_count > 0:
                summary_str = " [Text]"

            display_content = f"{dimension_str}{summary_str}{hash_str}"
            return [], False, display_content

        cell_content = cell_obj.value
        is_formula = isinstance(cell_content, ArrayFormula) or (isinstance(cell_content, str) and cell_content.startswith('='))
        
        if not is_formula:
            if isinstance(cell_content, str):
                display_content = f"'{cell_content}'"
            else:
                display_content = str(cell_content)
        else:
            display_content = str(cell_content)

        normalized_parts = []

        target_key_lower = f"'[{os.path.basename(target_file_path).lower()}]{actual_sheet_name.lower()}'!{target_cell_address.lower()}"
        found_key = next((k for k in excel_model.cells if k.lower() == target_key_lower), None)
        if not found_key:
            simple_key = f"'{actual_sheet_name}'!{target_cell_address}"
            if simple_key in excel_model.cells:
                found_key = simple_key
        
        compiled_cell_object = excel_model.cells.get(found_key) if found_key else None

        if compiled_cell_object and hasattr(compiled_cell_object, 'inputs') and compiled_cell_object.inputs:
             raw_references = list(compiled_cell_object.inputs.keys())
             ref_pattern = re.compile(r"'(.*)\[(.*?)\](.*?)'!(.*)")
             for ref in raw_references:
                part = {}
                if match := ref_pattern.match(ref):
                    _, filename_part, sheetname_part, cell_address_part = match.groups()
                    absolute_path = os.path.join(working_path, filename_part)
                    part = {"file": absolute_path, "sheet": sheetname_part, "cell": cell_address_part}
                else:
                    sheetname_part, cell_address_part = ref.split('!')
                    part = {"file": target_file_path, "sheet": sheetname_part.strip("'"), "cell": cell_address_part}
                normalized_parts.append(part)

        if is_formula:
            raw_formula = str(cell_content.text) if isinstance(cell_content, ArrayFormula) else str(cell_content)
            reconstructed_formula = raw_formula

            if hasattr(wb_openpyxl, "_external_links") and wb_openpyxl._external_links and compiled_cell_object and hasattr(compiled_cell_object, 'inputs'):
                ref_pattern_for_map = re.compile(r".*\[(.*?)\]")
                external_filenames = sorted(list({ref_pattern_for_map.match(ref).group(1) for ref in compiled_cell_object.inputs if ref_pattern_for_map.match(ref)}))

                index_to_path_map = {
                    i + 1: os.path.join(working_path, filename)
                    for i, filename in enumerate(external_filenames)
                }

                def replacer(match):
                    placeholder_index = int(match.group(1))
                    formula_part = match.group(2)
                    full_path = index_to_path_map.get(placeholder_index)
                    if not full_path:
                        return match.group(0)
                    if '!' in formula_part:
                        sheet_name, cell_ref = formula_part.split('!', 1)
                        return f"'{os.path.dirname(full_path)}\\[{os.path.basename(full_path)}]{sheet_name}'!{cell_ref}"
                    else:
                        return f"'{os.path.dirname(full_path)}\\[{os.path.basename(full_path)}]{formula_part}'"

                reconstructed_formula = re.sub(r'\[(\d+)\]([^\]!]+(?:![\$A-Z0-9:]+)?)(?=[,)\s*+\-\/\^=<>:&]|$)', replacer, raw_formula)

            display_content = reconstructed_formula
            if "INDIRECT" in raw_formula.upper():
                wb_data_only = None
                try:
                    match = re.search(r'INDIRECT\((.*)\)', raw_formula, re.IGNORECASE)
                    if match:
                        argument_str = match.group(1)
                        literals = re.findall(r'"(.*?)"', argument_str)
                        cell_refs = [ref for ref in re.split(r'"[^"]*"|&', argument_str) if ref]

                        wb_data_only = openpyxl.load_workbook(filename=target_file_path, data_only=True)
                        ws_data_only = wb_data_only[actual_sheet_name]
                        evaluated_refs = [str(ws_data_only[cell.strip()].value) for cell in cell_refs]
                        
                        final_target_str = ""
                        if len(literals) == 3 and len(evaluated_refs) == 2:
                             final_target_str = literals[0] + literals[1] + evaluated_refs[0] + literals[2] + evaluated_refs[1]
                        
                        if final_target_str:
                            ref_match = re.search(r"'?(.*\\\[(.*?)\])(.*?)'?!([A-Z0-9]+)", final_target_str, re.IGNORECASE)
                            if ref_match:
                                full_path_part, filename, sheet, cell = ref_match.groups()
                                dep_filepath = os.path.join(os.path.dirname(full_path_part), filename)
                                new_task = {"file": dep_filepath, "sheet": sheet, "cell": cell}
                                normalized_parts.insert(0, new_task)
                            else:
                                display_content += f" [Tracer Warning: Could not parse INDIRECT result '{final_target_str}']"
                except Exception as e:
                    display_content += f" [Tracer Warning: Could not resolve INDIRECT -> {e}]"
                finally:
                    if wb_data_only:
                        wb_data_only.close()

        return normalized_parts, is_formula, display_content

    except Exception as e:
        return [], False, f"❌ Error during analysis: {e}"
    finally:
        if wb_openpyxl:
            wb_openpyxl.close()

def get_active_excel_info():
    pythoncom.CoInitialize()
    excel = win32com.client.GetObject(Class="Excel.Application")
    wb = excel.ActiveWorkbook
    ws = excel.ActiveSheet
    cell = excel.ActiveCell
    file_path = wb.FullName
    sheet_name = ws.Name
    cell_address = cell.Address.replace("$", "")
    return file_path, sheet_name, cell_address

def run_scan_and_show(text_widget):
    file_path, sheet_name, cell_address = get_active_excel_info()
    task = {
        "file": file_path,
        "sheet": sheet_name,
        "cell": cell_address
    }
    unique_nodes_for_report = set()
    final_dependency_map = []
    import io, sys
    buffer = io.StringIO()
    sys_stdout = sys.stdout
    sys.stdout = buffer
    process_task_recursively(
        task,
        unique_nodes_for_report=unique_nodes_for_report,
        final_dependency_map=final_dependency_map,
        trace_dependency_vine=trace_dependency_vine,
        working_path=os.path.dirname(file_path),
        display_mode=display_mode
    )
    sys.stdout = sys_stdout
    result = buffer.getvalue()
    text_widget.delete("1.0", tk.END)
    text_widget.insert(tk.END, result)

root = tk.Tk()
root.title("Excel Dependency Scanner")
root.geometry("900x600")

scan_btn = tk.Button(root, text="Scan", width=20)
scan_btn.pack(pady=10)

output = scrolledtext.ScrolledText(root, width=120, height=35, font=("Consolas", 10))
output.pack(expand=True, fill="both")

scan_btn.config(command=lambda: run_scan_and_show(output))

root.mainloop()
